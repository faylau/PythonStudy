#!/usr/bin/env python
#encoding:utf-8

__authors__ = ['"Liu Fei" <liufei83@163.com>']
__version__ = "V0.1"


'''-------------------------------------------------------------------------------------------------------------
1. 上下文管理器是什么
（1）直接的解释，上下文管理器的任务是：代码块执行前准备，代码块执行后收拾；
（2）在Python2.5中加入，能够让代码可读性更强，错误更少；
（3）下面先介绍一个最简单的上下文管理器的例子（参见 Example_1.1）；
-------------------------------------------------------------------------------------------------------------'''
print "----------------Example_1.1----------------"
with open('Context.py', 'r') as f:
	print f.readline()	# 只读取第一行

'''-------------------------------------------------------------------------------------------------------------
2. 如何使用上下文管理器
2.1 首先来看，通常我们是如何打开一个文并写入“Hello World”的（Example_1.2）：
	* 先创建一个文件对象writer；
	* 写入内容；
	* 关闭文件对象；
（1）存在一个问题，若代码在写入或关闭文件对象前出错，那文件对象就无法回收了；
（2）比如，磁盘已满，在写入内容是出错；
（3）上述问题可以通过try-finally来解决，但在较复杂的代码中加入try-finally会变得很丑陋（暂时只能表面理解）；
2.2 我们可以选择使用上下文管理器来处理上述问题，请看Example_1.1中的例子：
（1）with 是一个关键词，并总伴随着上下文管理器出现；
（2）as 是另一个关键词，它表示将 open 函数返回的内容赋值给变量 f；
（3）接下来，在with语句块中就可以对文件对象f进行各种操作了；
（4）也就是，我们使用了“open”上下文管理器，它保证了代码既优雅又安全，出色地完成了try-finally的任务。

-------------------------------------------------------------------------------------------------------------'''
print "----------------Example_1.2----------------"
filename = 'test.txt'
writer = open(filename, 'w')
writer.write("Hello World")
writer.close()